ARG BASE_IMAGE=nvidia/cuda:12.0.0-base-ubuntu18.04
FROM $BASE_IMAGE

# Set the timezone non-interactively
ENV TZ=America/Detroit
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Install necessary packages
RUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y --no-install-recommends \
    python3 \
    python3-pip \
    sudo \
    libglu1-mesa-dev \
    xdg-user-dirs \
    pulseaudio \
    x11-xserver-utils \
    cmake \
    ninja-build \
    make \
    g++ \
    libboost-all-dev \
    g++-8 \
    clang-8 \
    curl \
    lsb-release \
    llvm-8 \
    llvm-8-dev \
    bc \
    netcat \
    xvfb \
    libxcursor1

# Set LLVM_DIR environment variable
ENV LLVM_DIR=/usr/lib/llvm-8/cmake

# ROS Melodic installation
RUN sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list' && \
    curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add - && \
    sudo apt update && \
    sudo apt install -y ros-melodic-desktop-full && \
    sudo apt-get install -y ros-melodic-catkin python-catkin-tools && \
    echo "source /opt/ros/melodic/setup.bash" >> ~/.bashrc

# Install ROS packages separately
RUN sudo apt update && sudo apt install -y \
    ros-melodic-mavros-msgs \
    ros-melodic-tf2-sensor-msgs \
    ros-melodic-move-base-msgs

# Upgrade pip and install dependencies
RUN python3 -m pip install --upgrade pip && \
    pip3 install setuptools wheel numpy

# Install rosdep
RUN sudo apt-get install -y python-rosdep && sudo rosdep init && rosdep update

# Create a user for running AirSim
RUN adduser --force-badname --disabled-password --gecos '' --shell /bin/bash airsim_user && \
    echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && \
    adduser airsim_user sudo && \
    adduser airsim_user audio && \
    adduser airsim_user video

# Copy the entrypoint script
COPY entrypoint.sh /home/airsim_user/

# Make the entrypoint script executable
RUN chmod +x /home/airsim_user/entrypoint.sh

USER airsim_user
WORKDIR /home/airsim_user

# Create the AirSim settings directory
RUN mkdir -p /home/airsim_user/Documents/AirSim

# Copy settings.json into the Docker container
COPY settings.json /home/airsim_user/Documents/AirSim/

# Copy the local AirSim folder into the Docker container
COPY AirSim /home/airsim_user/AirSim/

# Copy additional files and folder into the Docker container
COPY UnityPlayer.so /home/airsim_user/
COPY image_covering_45drones_limFOV_nogui_limmeshes_server_Data /home/airsim_user/image_covering_45drones_limFOV_nogui_limmeshes_server_Data/
COPY image_covering_45drones_limFOV_nogui_limmeshes_server.x86_64 /home/airsim_user/

# Change ownership of the home directory
RUN sudo chown -R airsim_user /home/airsim_user

# Build AirSim
WORKDIR /home/airsim_user/AirSim
RUN ./clean.sh && ./setup.sh && ./build.sh

# Build Unity project
WORKDIR /home/airsim_user/AirSim/Unity
RUN ./clean.sh && ./build.sh

# Set the working directory back to the home directory
WORKDIR /home/airsim_user

# Make the Unity executable script executable
RUN chmod +x image_covering_45drones_limFOV_nogui_limmeshes_server.x86_64

# Set up ROS and build the workspace
WORKDIR /home/airsim_user/AirSim/ros
RUN /bin/bash -c "source /opt/ros/melodic/setup.bash && \
    rosdep update && \
    rosdep install --from-paths src --ignore-src -r -y && \
    sudo apt install -y ros-melodic-mavros-msgs && \
    sudo apt install -y ros-melodic-tf2-sensor-msgs && \
    sudo apt install -y ros-melodic-move-base-msgs && \
    catkin build -DCMAKE_C_COMPILER=gcc-8 -DCMAKE_CXX_COMPILER=g++-8"

# Create roslogs directory
RUN mkdir -p /home/airsim_user/roslogs/

# Set up environment
RUN /bin/bash -c "source /opt/ros/melodic/setup.bash && source /home/airsim_user/AirSim/ros/devel/setup.bash"

# Set the working directory back to the home directory
WORKDIR /home/airsim_user

# Set the entrypoint
ENTRYPOINT ["/home/airsim_user/entrypoint.sh"]
